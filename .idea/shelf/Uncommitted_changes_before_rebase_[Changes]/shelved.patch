Index: src/main/java/homeWorkLessonFour/HomeWorkLessonFour.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package homeWorkLessonFour;\r\n\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class HomeWorkLessonFour {\r\n    private static Scanner in = new Scanner(System.in);\r\n    public static int size;\r\n    public static int fishkaToWin;\r\n    private static final char DOT_EMPTY = '•';\r\n    private static final char DOT_HUMAN = 'X';\r\n    private static final char DOT_AI = '0';\r\n\r\n    private static final String HEADER_FIRST_SYMBOL = \"#\";\r\n    public static char[][] map;\r\n\r\n    private static final String SPACE_MAP = \"\\t\";\r\n\r\n    private static Random random = new Random();\r\n\r\n    private static int turnsCount = 0;\r\n\r\n    public static void ternGame() {\r\n        do {\r\n            init();\r\n            printMap();\r\n            playGame();\r\n        } while (isContinueGame());\r\n        endGame();\r\n    }\r\n\r\n    private static void init() {\r\n        howManyWinMapSize();\r\n        howManyFishkaSize();\r\n        initMap();\r\n        turnsCount = 0;\r\n    }\r\n\r\n    /*\r\n     ****  Спрашиваем у игрока размерность игрового поля\r\n     ****  и инициализируем массив с проверкой на правильный ввод\r\n     */\r\n    public static void howManyWinMapSize() {\r\n\r\n        do {\r\n            System.out.print(\"Укажите размерность игрового поля, от 3 до 30: \");\r\n            while (!in.hasNextInt()) {                                                  //\r\n                System.out.print(\"Укажите размерность игрового поля, от 3 до 30: \");    //  **** проверяем что ввели цифру *****\r\n                in.next();                                                              //\r\n            }\r\n            size = in.nextInt();\r\n            map = new char[size][size];\r\n        } while (size < 3 || size > 30);\r\n\r\n    }\r\n\r\n    /*\r\n     ****  Проверяем размер поля и в зависимости от размера\r\n     ****  указываем сколько фишек необходимо для победы\r\n     */\r\n    private static void howManyFishkaSize() {\r\n        if (size >= 3 && size <= 6) {                       // размер поля 3-6 -> победа на 3 фишках\r\n            fishkaToWin = 3;\r\n        }\r\n        if (size >= 7 && size <= 10) {                      // размер 7-10 -> победа на 4 фшках\r\n            fishkaToWin = 4;\r\n        } else if (size > 10) {                             // размер 10+ -> победа на 5 фишках\r\n            fishkaToWin = 5;\r\n        }\r\n    }\r\n\r\n    /*\r\n     ****  Инициализируем и печатаем поле ****\r\n     */\r\n    private static void initMap() {\r\n\r\n\r\n        for (int i = 0; i < size; i++) {\r\n            for (int j = 0; j < size; j++) {\r\n                map[i][j] = DOT_EMPTY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void printMap() {\r\n        printMapHeader();\r\n        printMapBody();\r\n    }\r\n\r\n    private static void printMapHeader() {\r\n        System.out.print(HEADER_FIRST_SYMBOL + SPACE_MAP);\r\n        for (int i = 0; i < size; i++) {\r\n            printMapNumber(i);\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    private static void printMapNumber(int i) {\r\n        System.out.print(i + 1 + SPACE_MAP);\r\n    }\r\n\r\n    private static void printMapBody() {\r\n        for (int i = 0; i < size; i++) {\r\n            printMapNumber(i);\r\n            for (int j = 0; j < size; j++) {\r\n                System.out.print(map[i][j] + SPACE_MAP);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    /*\r\n     ****  играем ****\r\n     */\r\n    private static void playGame() {\r\n        while (true) {\r\n            humanTern();\r\n            printMap();\r\n\r\n            if (checkEnd(DOT_HUMAN)) {\r\n                break;\r\n            }\r\n\r\n            aiTern();\r\n            printMap();\r\n\r\n            if (checkEnd(DOT_AI)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /*\r\n     ****  Проверяем на конец ****\r\n     */\r\n    private static boolean checkEnd(char symbol) {\r\n\r\n        if (checkWin(symbol)) {\r\n            if (symbol == DOT_HUMAN) {\r\n                System.out.println(\"ВЫ ПОБЕДИЛИ!\");\r\n            } else {\r\n                System.out.println(\"ПОБЕДИЛ КОМПЬЮТЕР\");\r\n            }\r\n            return true;\r\n        }\r\n\r\n        if (chechDraw()) {\r\n            System.out.println(\"Ничья!\");\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /*\r\n     ****  Проверяем на победу ****\r\n     */\r\n    private static boolean checkWin(char symbol) {\r\n\r\n        for (int col = 0; col < size - fishkaToWin + 1; col++) {\r\n            for (int row = 0; row < size - fishkaToWin + 1; row++) {\r\n                if (checkDiagonal(symbol, col, row) || checkRowColumns(symbol, col, row))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /*\r\n     ****  Проверяем строки и столбцы ****\r\n     */\r\n    private static boolean checkRowColumns(char symbol, int offsetX, int offsetY) {\r\n        boolean columns;\r\n        boolean rows;\r\n        for (int col = offsetX; col < fishkaToWin + offsetX; col++) {\r\n            columns = true;\r\n            rows = true;\r\n            for (int row = offsetY; row < fishkaToWin + offsetY; row++) {\r\n                columns &= (map[col][row] == symbol);\r\n                rows &= (map[row][col] == symbol);\r\n            }\r\n\r\n            if (columns || rows) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     **** Проверяем диагонали ****\r\n     */\r\n    private static boolean checkDiagonal(char symbol, int offsetX, int offsetY) {\r\n        boolean slevaNaPravo;\r\n        boolean sPravoNaLevo;\r\n        slevaNaPravo = true;\r\n        sPravoNaLevo = true;\r\n        for (int i = 0; i < fishkaToWin; i++) {\r\n            slevaNaPravo &= (map[i + offsetX][i + offsetY] == symbol);\r\n            sPravoNaLevo &= (map[fishkaToWin - i - 1 + offsetX][i + offsetY] == symbol);\r\n        }\r\n\r\n        if (slevaNaPravo || sPravoNaLevo) return true;\r\n\r\n        return false;\r\n    }\r\n    /*\r\n     ****  Проверяем на ничью ****\r\n     */\r\n    private static boolean chechDraw() {\r\n        return turnsCount >= size * size;\r\n    }\r\n\r\n    private static void humanTern() {\r\n        System.out.println(\"ХОД ЧЕЛОВЕКА!\");\r\n\r\n        int rowNumber;\r\n        int columnNumber;\r\n\r\n        while (true) {\r\n            System.out.println(\"Введите координату строки\");\r\n            rowNumber = getValidNumberFromScanner() - 1;\r\n\r\n            System.out.println(\"Введите координату столбца\");\r\n            columnNumber = getValidNumberFromScanner() - 1;\r\n\r\n            if (isaCellFree(rowNumber, columnNumber))\r\n                break;\r\n            System.out.printf(\"Ячейка с координатами:  %d:%d занята%n%n\", +rowNumber + 1, columnNumber + 1);\r\n        }\r\n\r\n        map[rowNumber][columnNumber] = DOT_HUMAN;\r\n        turnsCount++;\r\n    }\r\n\r\n// проверка на ошибки\r\n    private static int getValidNumberFromScanner() {\r\n        while (true) {\r\n            if (in.hasNextInt()) {\r\n                int n = in.nextInt();\r\n                if (isNumberValid(n)) {\r\n                    return n;\r\n                }\r\n                System.out.println(\"!Провверьте координаты, дожно быть от 1 до \" + size + \"!\");\r\n            } else {\r\n                System.out.println(\"!Допускается вводить только целые числа!\");\r\n                in.next();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static boolean isNumberValid(int number) {\r\n        return number >= 1 && number <= size;\r\n    }\r\n\r\n    private static boolean isaCellFree(int rowNumber, int columnNumber) {\r\n        if (map[rowNumber][columnNumber] == DOT_EMPTY) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static void aiTern() {\r\n\r\n        System.out.println(\"ХОД КОМПЬЮТЕРА!\");\r\n\r\n        int rowNumber;\r\n        int columnNumber;\r\n        do {\r\n            rowNumber = random.nextInt(size);\r\n            columnNumber = random.nextInt(size);\r\n        }\r\n        while (!isaCellFree(rowNumber, columnNumber));\r\n\r\n        map[rowNumber][columnNumber] = DOT_AI;\r\n        turnsCount++;\r\n    }\r\n\r\n    private static boolean isContinueGame() {\r\n        System.out.println(\"Хотить продолжить? y\\\\n\");\r\n        return switch (in.next()) {\r\n            case \"y\", \"yes\", \"д\", \"да\", \"н\", \"+\" -> true;\r\n            default -> false;\r\n        };\r\n    }\r\n\r\n    private static void endGame() {\r\n        System.out.println(\"Ты заходи если что, без тебя будет скучно;-)\");\r\n        in.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/homeWorkLessonFour/HomeWorkLessonFour.java b/src/main/java/homeWorkLessonFour/HomeWorkLessonFour.java
--- a/src/main/java/homeWorkLessonFour/HomeWorkLessonFour.java	(revision 6d075caf4d61a5e66ff250bf149292db1265f147)
+++ b/src/main/java/homeWorkLessonFour/HomeWorkLessonFour.java	(date 1653562507292)
@@ -282,4 +282,4 @@
         System.out.println("Ты заходи если что, без тебя будет скучно;-)");
         in.close();
     }
-}
+}
\ No newline at end of file
Index: src/main/java/homeWorkLessonFour/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package homeWorkLessonFour;\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Игра КРЕСТИКИ <-> НОЛИКИ\");\r\n        HomeWorkLessonFour.ternGame();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/homeWorkLessonFour/Main.java b/src/main/java/homeWorkLessonFour/Main.java
--- a/src/main/java/homeWorkLessonFour/Main.java	(revision 6d075caf4d61a5e66ff250bf149292db1265f147)
+++ b/src/main/java/homeWorkLessonFour/Main.java	(date 1653562507261)
@@ -4,4 +4,4 @@
         System.out.println("Игра КРЕСТИКИ <-> НОЛИКИ");
         HomeWorkLessonFour.ternGame();
     }
-}
\ No newline at end of file
+}
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1653561121142)
+++ b/.idea/uiDesigner.xml	(date 1653561121142)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
